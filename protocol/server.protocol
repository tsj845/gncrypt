DEFINES:
    the server side protocol for "gncrypt", see the client protocol for how this data is used

TERMS:
    server - the server
    handle - an ip address and some id, used to do communications handoffs
    client - the client
    host - the client that is managing the communications in a conversation
    entity - any client or server
    other - the other party in a request dialog

CONDITIONS:
    "single request" - when an entity will only be making one request
    "bundled" - whether there are multiple bundled requests
    "is_data" - whether there is data left in the recieving buffer

PSUDO FUNCTIONS:
    send(byte|byte[]) - send a byte or series of bytes to the other party
    get_bytes(int) - signifies a number of bytes to read from the recieving buffer
    TERMINATE() - connection termination

TYPES:
    ip_address - type {1 byte} + ( type ? 4 byte : 16 byte ) + port {2 byte}

SENDING PROTOCOLS:
    these dictate how certain types will be serialized for transit through TCP sockets

    STRINGS:
        {stringlength} + {stringcontent}
        stringlength = 4 byte length of content in bytes
        stringcontent = {stringlength} byte utf-8 data
    
    ARRAYS:
        {arraylen} + {arrayitems}
        arraylen = 4 byte number of array items
        arrayitems = {arraylen} items sent with normal sending protocols
    
    LOG ITEM:
        {sender id} + {contents}

IMPORTANT:
    ERRORS:
        as it is inevitable that there will be errors this is the error send protocol

        the byte 0xff is a response code reserved for signifying that an error occurred, the exact nature of the error will be communicated directly after this

        0x00: unrecognized opcode - the opcode sent was not recognized
        0x01: invalid data - the data sent was outside accepted values
        0x02: key not found - the given key was not found in a map obj
    
    THE BUNDLE STANDARD:
        use of the bundle standard indicates that multiple requests can be bundled into the same transmission, in some instances the protocols may specify that it must be indicated that there are bundled requests

```
STORAGE FORMATS: // dictates what data a server will store
    COMMON:
        LOG - OBJECT {
            sender: 4 byte,
            contents: String
        }[]
    STORAGE:
        ALIASES - MAP { uid {4 byte}, data { see DATA } }
        DATA - OBJECT {
            online: bool,
            current_ip: ip_address,
        }
        GROUPS - MAP { uid {16 byte}, OBJECT {
                members: {4 byte}[],
                log: LOG
            }
        }
```

```
STORAGE COMMUNICATIONS: // protocol for communicating with storage servers

    note that clients should not initiate connections with storage servers unless specified in a protocol

    USES: BUNDLE STANDARD
    
    REQUEST LOOP:
        resolver: send(OPCODE {1 byte});
        storage: opcode = get_bytes(1);
        match opcode {
            case 0x00 { // retrieve current ip of an alias
                resolver: send(uid {4 byte});
                storage: uid = get_bytes(4);
                if ALIASES.contains(uid) {
                    let {online, ip} = DATA[uid];
                    storage: send(online + ip);
                } else {
                    storage: send(0xff, 0x02);
                }
            }
            case 0x01 {
                client: send(uid {16 byte});
                storage: uid = get_bytes(16);
                if GROUPS.contains(uid) {
                    let {members, log} = GROUPS[uid];
                    storage: send(members + log);
                } else {
                    storage: send(0xff, 0x02);
                }
            }
            default {
                storage: send(0xff, 0x00);
            }
        }
        TERMINATE();
```